{"version":3,"file":"kotlin-react-redux.js","sources":["../../../src/main/kotlin/react/RBuilder.kt","../../../src/main/kotlin/react/redux/Dsl.kt","../../../src/main/kotlin/react/redux/Helpers.kt","../../../src/main/kotlin/kotlinext/js/Helpers.kt"],"sourcesContent":["package react\n\nimport kotlinext.js.*\nimport kotlin.reflect.*\n\n@DslMarker\nannotation class ReactDsl\n\n@ReactDsl\nopen class RBuilder {\n    val childList = mutableListOf<Any>()\n\n    fun child(element: ReactElement): ReactElement {\n        childList.add(element)\n        return element\n    }\n\n    operator fun String.unaryPlus() {\n        childList.add(this)\n    }\n\n    fun <P : RProps> child(type: Any, props: P, children: List<Any>) =\n        child(createElement(type, props, *children.toTypedArray()))\n\n    fun <P : RProps> child(type: Any, props: P, handler: RHandler<P>): ReactElement {\n        val children = with(RElementBuilder(props)) {\n            handler()\n            childList\n        }\n        return child(type, props, children)\n    }\n\n    operator fun <P : RProps> RClass<P>.invoke(handler: RHandler<P>) =\n        child(this, jsObject {}, handler)\n\n    operator fun <T> RProvider<T>.invoke(value: T, handler: RHandler<RProviderProps<T>>) =\n        child(this, jsObject { this.value = value }, handler)\n\n    operator fun <T> RConsumer<T>.invoke(handler: RBuilder.(T) -> Unit) =\n        child(this, jsObject<RConsumerProps<T>> {\n            this.children = { value ->\n                buildElements { handler(value) }\n            }\n        }) {}\n\n    fun <P : RProps> RClass<P>.node(\n        props: P,\n        children: List<Any> = emptyList()\n    ) = child(this, clone(props), children)\n\n    fun <P : RProps, C : Component<P, *>> child(klazz: KClass<C>, handler: RHandler<P>): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass(handler)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> child(noinline handler: RHandler<P>) =\n        child(C::class, handler)\n\n    fun <P : RProps, C : Component<P, *>> node(\n        klazz: KClass<C>,\n        props: P,\n        children: List<Any> = emptyList()\n    ): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass.node(props, children)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> node(props: P, children: List<Any> = emptyList()) =\n        node(C::class, props, children)\n\n    fun RProps.children() {\n        childList.addAll(Children.toArray(children))\n    }\n}\n\nopen class RBuilderMultiple : RBuilder() {\n}\n\nfun buildElements(handler: RBuilder.() -> Unit): dynamic {\n    val nodes = RBuilder().apply(handler).childList\n    return when {\n        nodes.size == 0 -> null\n        nodes.size == 1 -> nodes.first()\n        else -> createElement(Fragment, js {}, *nodes.toTypedArray())\n    }\n}\n\nopen class RBuilderSingle : RBuilder() {\n}\n\ninline fun buildElement(handler: RBuilder.() -> Unit): ReactElement? =\n    RBuilder().apply(handler).childList.first() as ReactElement?\n\nopen class RElementBuilder<out P : RProps>(open val attrs: P) : RBuilder() {\n    fun attrs(handler: P.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = attrs.key\n        set(value) {\n            attrs.key = value\n        }\n\n    var ref: RRef\n        get() = attrs.ref\n        set(value) {\n            attrs.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        attrs.ref(handler)\n    }\n}\n\ntypealias RHandler<P> = RElementBuilder<P>.() -> Unit\n\nfun <P : RProps> forwardRef(handler: RBuilder.(RProps, RRef) -> Unit): RClass<P> {\n    return rawForwardRef { props, ref ->\n        buildElements { handler(props, ref) }\n    }\n}\n\ntypealias FunctionalComponent<P> = (props: P) -> dynamic\n\n/**\n * Get functional component from [func]\n */\nfun <P : RProps> functionalComponent(\n    func: RBuilder.(props: P) -> Unit\n): FunctionalComponent<P> {\n    return { props: P ->\n        buildElements {\n            func(props)\n        }\n    }\n}\n\n/**\n * Append functional component [functionalComponent] as child of current builder\n */\nfun <P : RProps> RBuilder.child(\n    functionalComponent: FunctionalComponent<P>,\n    props: P = jsObject {},\n    handler: RHandler<P> = {}\n): ReactElement {\n    return child(functionalComponent, props, handler)\n}\n","package react.redux\n\nimport react.*\nimport redux.*\n\nfun RBuilder.provider(store: Store<*, *, *>, handler: RHandler<ProviderProps>) =\n    child<ProviderProps, Provider> {\n        attrs.store = store\n        handler()\n    }\n","package react.redux\n\nimport kotlinext.js.*\nimport react.*\n\nfun <A, R> rConnect(\n        options: (Options<Any, RProps, RProps, DispatchProps<A, R>>.() -> Unit) = {}\n): HOC<DispatchProps<A, R>, RProps> {\n    return connect<Any, A, R, RProps, RProps, RProps, DispatchProps<A, R>>(\n            undefined,\n            undefined,\n            undefined,\n            js {\n                getDisplayName = { name: String -> \"RConnect($name)\" }\n                methodName = \"rConnect\"\n                options(this)\n            }.unsafeCast<Options<Any, RProps, RProps, DispatchProps<A, R>>>()\n    )\n}\n\nfun <S, OP : RProps, P : RProps> rConnect(\n    mapStateToProps: P.(S, OP) -> Unit,\n    options: (Options<S, OP, P, P>.() -> Unit) = {}\n): HOC<P, OP> {\n    return connect<S, Any, Any, OP, P, RProps, P>(\n        { state: S, ownProps: OP ->\n            js {\n                mapStateToProps(this, state, ownProps)\n            }.unsafeCast<P>()\n        },\n        undefined,\n        undefined,\n        js {\n            getDisplayName = { name: String -> \"RConnect($name)\" }\n            methodName = \"rConnect\"\n            options(this)\n        }.unsafeCast<Options<S, OP, P, P>>()\n    )\n}\n\nfun <A, R, OP : RProps, P : RProps> rConnect(\n    mapDispatchToProps: P.((A) -> R, OP) -> Unit,\n    options: (Options<Any, OP, RProps, P>.() -> Unit) = {}\n): HOC<P, OP> {\n    return connect<Any, A, R, OP, RProps, P, P>(\n        undefined,\n        { dispatch, ownProps ->\n            js {\n                mapDispatchToProps(this, dispatch, ownProps)\n            }.unsafeCast<P>()\n        },\n        undefined,\n        js {\n            getDisplayName = { name: String -> \"RConnect($name)\" }\n            methodName = \"rConnect\"\n            options(this)\n        }.unsafeCast<Options<Any, OP, RProps, P>>()\n    )\n}\n\nfun <S, A, R, OP : RProps, SP : RProps, DP : RProps, P : RProps> rConnect(\n    mapStateToProps: SP.(S, OP) -> Unit,\n    mapDispatchToProps: DP.((A) -> R, OP) -> Unit,\n    options: (Options<S, OP, SP, P>.() -> Unit) = {}\n): HOC<P, OP> {\n    return connect<S, A, R, OP, SP, DP, P>(\n        { state, ownProps ->\n            js {\n                mapStateToProps(this, state, ownProps)\n            }.unsafeCast<SP>()\n        },\n        { dispatch, ownProps ->\n            js {\n                mapDispatchToProps(this, dispatch, ownProps)\n            }.unsafeCast<DP>()\n        },\n        undefined,\n        js {\n            getDisplayName = { name: String -> \"RConnect($name)\" }\n            methodName = \"rConnect\"\n            options(this)\n        }.unsafeCast<Options<S, OP, SP, P>>()\n    )\n}\n\nfun <S, A, R, OP : RProps, SP : RProps, DP : RProps, P : RProps> rConnect(\n    mapStateToProps: SP.(S, OP) -> Unit,\n    mapDispatchToProps: DP.((A) -> R, OP) -> Unit,\n    mergeProps: P.(SP, DP, OP) -> Unit,\n    options: (Options<S, OP, SP, P>.() -> Unit) = {}\n): HOC<P, OP> {\n    return connect<S, A, R, OP, SP, DP, P>(\n        { state, ownProps ->\n            js {\n                mapStateToProps(this, state, ownProps)\n            }.unsafeCast<SP>()\n        },\n        { dispatch, ownProps ->\n            js {\n                mapDispatchToProps(this, dispatch, ownProps)\n            }.unsafeCast<DP>()\n        },\n        { stateProps, dispatchProps, ownProps ->\n            js {\n                mergeProps(this, stateProps, dispatchProps, ownProps)\n            }.unsafeCast<P>()\n        },\n        js {\n            getDisplayName = { name: String -> \"RConnect($name)\" }\n            methodName = \"rConnect\"\n            options(this)\n        }.unsafeCast<Options<S, OP, SP, P>>()\n    )\n}\n","package kotlinext.js\n\ninline fun <T : Any> jsObject(builder: T.() -> Unit): T {\n    val obj: T = js(\"({})\")\n    return obj.apply {\n        builder()\n    }\n}\n\ninline fun js(builder: dynamic.() -> Unit): dynamic = jsObject(builder)\n\nfun <T : Any> clone(obj: T) = objectAssign(jsObject<T> {}, obj)\n\ninline fun <T : Any> assign(obj: T, builder: T.() -> Unit) = clone(obj).apply(builder)\n\nfun <T, R : T> assign(dest: R, src: T): R {\n    console.warn(\"kotlinext.js.assign is deprecated, use kotlinext.js.objectAssign instead\")\n    return objectAssign(dest, src)\n}\n\nfun toPlainObjectStripNull(obj: Any) = js {\n    for (key in Object.keys(obj)) {\n        val value = obj.asDynamic()[key]\n        if (value != null) this[key] = value\n    }\n}\n"],"names":[],"mappings":";;;;;kBAuDI,gB;;;;ICjD+B,4B;MAC3B,wBAAc,a;MACd,0B;MACJ,W;IAH+B,C;EAAA,C;;IAA/B,ODkDI,6CClD2B,+BDkD3B,C;EClDJ,C;;ICA+E,W;EAAA,C;;IAOhC,qBAAW,IAAX,M;EAAkB,C;;IAP7D,uB;MAAA,UAA0E,e;IAGtE,oB;IACA,sB;IACA,sB;ICRR,UAAa,E;IACN,GDSK,kBAAiB,sB;ICTtB,GDUK,cAAa,U;IACb,QCXL,GDWK,C;IAPZ,OAAO,8BCJA,GDIA,C;EAUX,C;;IAIkD,W;EAAA,C;;IAG1C,kC;MCtBJ,UAAa,E;MDwBD,wBCvBL,GDuBK,kB;MADJ,OCtBD,G;IDqBH,C;EAAA,C;;IAQuC,qBAAW,IAAX,M;EAAkB,C;;IAX7D,uB;MAAA,UAA6C,iB;IAQzC,oB;IACA,sB;IC5BJ,UAAa,E;IACN,GD6BC,kBAAiB,wB;IC7BlB,GD8BC,cAAa,U;IACb,QC/BD,GD+BC,C;IAXR,OAAO,QACH,kCADG,gBCpBA,GDoBA,C;EAcX,C;;IAIyD,W;EAAA,C;;IAIjD,qC;MC3CJ,UAAa,E;MD6CD,2BC5CL,GD4CK,qB;MADJ,OC3CD,G;ID0CH,C;EAAA,C;;IAOuC,qBAAW,IAAX,M;EAAkB,C;;IAX7D,uB;MAAA,UAAoD,iB;IAGhD,oB;IAMA,sB;IChDJ,UAAa,E;IACN,GDiDC,kBAAiB,wB;ICjDlB,GDkDC,cAAa,U;IACb,QCnDD,GDmDC,C;IAXR,OAAO,cAEH,qCAFG,UCxCA,GDwCA,C;EAcX,C;;IAKmD,W;EAAA,C;;IAG3C,kC;MC/DJ,UAAa,E;MDiED,wBChEL,GDgEK,kB;MADJ,OC/DD,G;ID8DH,C;EAAA,C;;IAKA,qC;MCpEJ,UAAa,E;MDsED,2BCrEL,GDqEK,qB;MADJ,OCpED,G;IDmEH,C;EAAA,C;;IAOuC,qBAAW,IAAX,M;EAAkB,C;;IAf7D,uB;MAAA,UAA8C,iB;IAa1C,oB;ICzEJ,UAAa,E;IACN,GD0EC,kBAAiB,wB;IC1ElB,GD2EC,cAAa,U;IACb,QC5ED,GD4EC,C;IAfR,OAAO,QACH,kCADG,EAMH,qCANG,QC7DA,GD6DA,C;EAkBX,C;;IAMmD,W;EAAA,C;;IAG3C,kC;MCzFJ,UAAa,E;MD2FD,wBC1FL,GD0FK,kB;MADJ,OCzFD,G;IDwFH,C;EAAA,C;;IAKA,qC;MC9FJ,UAAa,E;MDgGD,2BC/FL,GD+FK,qB;MADJ,OC9FD,G;ID6FH,C;EAAA,C;;IAKA,sD;MCnGJ,UAAa,E;MDqGD,mBCpGL,GDoGK,sC;MADJ,OCnGD,G;IDkGH,C;EAAA,C;;IAMuC,qBAAW,IAAX,M;EAAkB,C;;IAnB7D,uB;MAAA,UAA8C,iB;ICtF9C,UAAa,E;IACN,GDwGC,kBAAiB,wB;ICxGlB,GDyGC,cAAa,U;IACb,QC1GD,GD0GC,C;IAnBR,OAAO,QACH,kCADG,EAMH,qCANG,EAWH,8BAXG,ECvFA,GDuFA,C;EAsBX,C;;;;;;;;;;;;;;;;;;;;;;"}