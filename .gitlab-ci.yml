image: gradle:6.6.1-jdk8


# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
stages:
  - test
  - publish
  - release

test:
  stage: test
  script: gradle --build-cache check --stacktrace
  only:
    - master
    - develop
    - merge_requests
  cache:
    key: "$CI_PIPELINE_ID"
    policy: push
    paths:
      - build
      - .gradle

publish:gradlePluginPortal:
  stage: publish
  script: gradle publishPlugins -Pgradle.publish.key="$GRADLE_PUBLISH_KEY" -Pgradle.publish.secret="$GRADLE_PUBLISH_SECRET" --stacktrace
  only:
    - master
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - build
      - .gradle

publish:Bintray:
  stage: publish
  script: gradle publish -Ppublish.Bintray=true -Ppublish=true -Poverride=false --stacktrace
  only:
    - master
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - build
      - .gradle

publish:GitLab:
  stage: publish
  script: gradle publish -Ppublish.GitLab=true -Ppublish=true -Poverride=false --stacktrace
  only:
    - master
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - build
      - .gradle

release:gitLab:
  stage: release
  script: gradle gitLabRelease --stacktrace
  only:
    - master
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - build
      - .gradle

sast:
  variables:
    SAST_DEFAULT_ANALYZERS: spotbugs
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
